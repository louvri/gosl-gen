{{- $packageName := toLower .Table.Name }}
package {{ $packageName}} 
{{- $shouldImportSql := false }}
{{- range .Table.Columns }}
    {{- if eq .Type "sql.NullTime" }}
        {{- $shouldImportSql = true }}
      {{- else if eq .Type "sql.NullString" }}
        {{- $shouldImportSql = true }}
    {{- end }}
{{- end }}
import (
	"fmt"
	"strings"
    {{- if eq $shouldImportSql true }}
        "database/sql"
    {{- end }}
)

type Model struct {
{{- range .Table.Columns }}
    {{- if eq .Type "bool"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}  
{{- range .Table.Columns }}
    {{- if eq .Type "int"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
{{- range .Table.Columns }}
    {{- if eq .Type "int32"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
{{- range .Table.Columns }}
    {{- if eq .Type "int64"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
{{- range .Table.Columns }}
    {{- if eq .Type "float32"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
{{- range .Table.Columns }}
    {{- if eq .Type "float64"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
{{- range .Table.Columns }}
    {{- if eq .Type "[]byte"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
{{- range .Table.Columns }}
    {{- if eq .Type "string"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
{{- range .Table.Columns }}
    {{- if eq .Type "sql.NullString"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} string `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
{{- range .Table.Columns }}
    {{- if eq .Type "uuid.UUID"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
{{- range .Table.Columns }}
    {{- if eq .Type "time.Time"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
{{- range .Table.Columns }}
    {{- if eq .Type "sql.NullTime"}}
    {{- $field := ""}}
    {{- $tokens := split .Name "_"}}
    {{- range $index , $element := $tokens}}
        {{- $field = (print $field (title $element))}}
    {{- end}}
    {{$field}} {{.Type}} `db:"{{- .Name}}"`
    {{- end}}
{{- end}}
    Defaults map[string]interface{}
}

func (m *Model) SetDefaults(defaults map[string]interface{}){
    m.Defaults = defaults
}

func (m *Model) Get(field string) interface{}{
    switch field {
         {{- range .Table.Columns }}
                {{- $field := ""}}
                {{- $tokens := split .Name "_"}}
                {{- range $index, $element := $tokens}}
                    {{- $field = (print $field (title $element))}}
                {{- end}}
                case "{{- .Name}}","{{- $field}}": return m.{{- $field}}
         {{- end}}
    }
    return nil
}

func (m *Model) Patch(data Model) {
    {{- range .Table.Columns }}
        {{- $field := ""}}
        {{- $tokens := split .Name "_"}}
        {{- range $index, $element := $tokens}}
            {{- $field = (print $field (title $element))}}
        {{- end}}
        {{- if eq .Type "string"}}     
            if data.{{- $field}} != "" {
                m.{{- $field}} = data.{{- $field}}
            }
        {{- else if eq .Type "float32"}}
            if data.{{- $field}} != 0 {
                m.{{- $field}} = data.{{- $field}}
            }
        {{- else if eq .Type "float64"}}
            if data.{{- $field}} != 0 {
                m.{{- $field}} = data.{{- $field}}
            }
        {{- else if eq .Type "int32"}}
            if data.{{- $field}} != 0 {
                m.{{- $field}} = data.{{- $field}}
            }
        {{- else if eq .Type "int64"}}
            if data.{{- $field}} != 0 {
                m.{{- $field}} = data.{{- $field}}
            }
        {{- end}}
    {{- end}}
}

func (m *Model) ToString(builder *strings.Builder) {
     {{- range .Table.Columns }}
            {{- $objectProperty := ""}}
            {{- $tokens := split .Name "_" }}
            {{- range $index, $element := $tokens }}
                {{- $objectProperty = (print $objectProperty (title $element))}}
            {{- end }}
            if builder.Len() > 0 {
                builder.WriteString(",")
            }
            {{- if eq .Type "string"}}
                builder.WriteString("\"")    
                builder.WriteString(m.{{- $objectProperty}})
                builder.WriteString("\"")
            {{- else if eq .Type "float32"}}
                builder.WriteString(fmt.Sprintf("%.2f",m.{{- $objectProperty}}))
            {{- else if eq .Type "float64"}}
                builder.WriteString(fmt.Sprintf("%.2f",m.{{- $objectProperty}}))
            {{- else if eq .Type "int"}}
                builder.WriteString(fmt.Sprintf("%d",m.{{- $objectProperty}}))
            {{- else if eq .Type "int32"}}
                builder.WriteString(fmt.Sprintf("%d",m.{{- $objectProperty}}))
            {{- else if eq .Type "int64"}}
                builder.WriteString(fmt.Sprintf("%d",m.{{- $objectProperty}}))
            {{- else}}
                builder.WriteString(fmt.Sprintf("%v",m.{{- $objectProperty}}))
            {{- end}}
    {{- end}}
}

func (m *Model) ToMap(builder map[string]interface{},dontIgnoreEmtpy ...bool) map[string]interface{} {
    if builder == nil {
        builder = make(map[string]interface{})
    }
    var dontIgnore bool
    if len(dontIgnoreEmtpy) > 0 {
         dontIgnore = dontIgnoreEmtpy[0]
    }
    {{- range .Table.Columns }}
        {{- $field := "" }}
        {{- $objectProperty := ""}}
        {{- $tokens := split .Name "_" }}
        {{- range $index, $element := $tokens }}
            {{- if eq $index 0 }}
                {{- $field = (print $field $element)}}
            {{- else }}
                {{- $field = (print $field (title $element))}}
            {{- end }}
            {{- $objectProperty = (print $objectProperty (title $element))}}
        {{- end }}
        if dontIgnore {
            {{- if (eq .Type "float32") }}
                value := float32(0.0)
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(float32)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                } else {
                    builder["{{- $field }}"] = value
                }
            {{- else if (eq .Type "float64") }}
                value := float64(0.0)
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(float64)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                } else {
                    builder["{{- $field }}"] = value
                }
            {{- else if (eq .Type "int") }}
                value := int(0)
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(int)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                } else {
                    builder["{{- $field }}"] = value
                }
            {{- else if (eq .Type "int32") }}
                value := int32(0)
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(int32)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                } else {
                    builder["{{- $field }}"] = value
                }
            {{- else if (eq .Type "int64") }}
                value := int64(0)
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(int64)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                } else {
                    builder["{{- $field }}"] = value
                }
            {{- else}}
                value := ""
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(string)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                } else {
                     builder["{{- $field }}"] = value
                }
            {{- end}} 
        } else {
           {{- if (eq .Type "float32") }}
                value := float32(0.0)
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(float32)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                }
            {{- else if (eq .Type "float64") }}
                value := float64(0.0)
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(float64)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                }
            {{- else if (eq .Type "int") }}
                value := int(0)
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(int)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                }
            {{- else if (eq .Type "int32") }}
                value := int32(0)
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(int32)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                }
            {{- else if (eq .Type "int64") }}
                 value := int64(0)
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(int64)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                }
            {{- else}}
                value := ""
                if  m.Defaults["{{- $field}}"] != nil {
                    value = m.Defaults["{{- $field}}"].(string)
                }
                if m.{{- $objectProperty}} != value {
                    builder["{{- $field }}"] = m.{{- $objectProperty}}
                }
            {{- end}} 
        }
    {{- end }}
    return builder
}

func (m *Model) ToMapWithFilter(builder map[string]interface{},filter []string,dontIgnoreEmtpy ...bool) map[string]interface{} {
    if builder == nil {
        builder = make(map[string]interface{})
    }
    var dontIgnore bool
    if len(dontIgnoreEmtpy) > 0 {
         dontIgnore = dontIgnoreEmtpy[0]
    }
    for _,item := range filter {
            switch strings.ToLower(item) {
            {{- range .Table.Columns }}
                {{- $field := "" }}
                {{- $objectProperty := ""}}
                {{- $tokens := split .Name "_" }}
                {{- range $index, $element := $tokens }}
                    {{- $field = (print $field $element)}}
                    {{- $objectProperty = (print $objectProperty (title $element))}}
                {{- end }}
                case "{{- $field}}":
                     if dontIgnore {
                        {{- if (eq .Type "float32") }}
                            value := float32(0.0)
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(float32)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            } else {
                                builder["{{- $field }}"] = value
                            }
                        {{- else if (eq .Type "float64") }}
                            value := float64(0.0)
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(float64)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            } else {
                                builder["{{- $field }}"] = value
                            }
                        {{- else if (eq .Type "int") }}
                            value := int(0)
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(int)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            } else {
                                builder["{{- $field }}"] = value
                            }
                        {{- else if (eq .Type "int32") }}
                            value := int32(0)
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(int32)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            } else {
                                builder["{{- $field }}"] = value
                            }
                        {{- else if (eq .Type "int64") }}
                            value := int64(0)
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(int64)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            } else {
                                builder["{{- $field }}"] = value
                            }
                        {{- else}}
                            value := ""
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(string)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            } else {
                                builder["{{- $field }}"] = value
                            }
                        {{- end}} 
                    } else {
                        {{- if (eq .Type "float32") }}
                            value := float32(0.0)
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(float32)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            }
                        {{- else if (eq .Type "float64") }}
                            value := float64(0.0)
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(float64)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            }
                        {{- else if (eq .Type "int") }}
                            value := int(0)
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(int)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            }
                        {{- else if (eq .Type "int32") }}
                            value := int32(0)
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(int32)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            }
                        {{- else if (eq .Type "int64") }}
                            value := int64(0)
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(int64)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            }
                        {{- else}}
                            value := ""
                            if  m.Defaults["{{- $field}}"] != nil {
                                value = m.Defaults["{{- $field}}"].(string)
                            }
                            if m.{{- $objectProperty}} != value {
                                builder["{{- $field }}"] = m.{{- $objectProperty}}
                            }
                        {{- end}} 
                    }
            {{- end}}
            }
    }
    return builder
}

//note: use the actual column name registered at the database
func (m *Model) ToStringWithFilter(builder *strings.Builder, filter []string, injector func(field string)) {
    for _,item := range filter {
        switch strings.ToLower(item) {
        {{- range .Table.Columns }}
            {{- $field := "" }}
            {{- $objectProperty := ""}}
            {{- $tokens := split .Name "_" }}
            {{- range $index, $element := $tokens }}
                {{- $field = (print $field $element)}}
                {{- $objectProperty = (print $objectProperty (title $element))}}
            {{- end }}
            case "{{- $field}}":
                if builder.Len() > 0 {
                    builder.WriteString(",")
                }
                {{- if eq .Type "string"}}
                    builder.WriteString("\"")    
                    builder.WriteString(m.{{- $objectProperty}})
                    builder.WriteString("\"")
                {{- else if eq .Type "float32"}}
                    builder.WriteString(fmt.Sprintf("%.2f",m.{{- $objectProperty}}))
                {{- else if eq .Type "float64"}}
                    builder.WriteString(fmt.Sprintf("%.2f",m.{{- $objectProperty}}))
                {{- else if eq .Type "int"}}
                    builder.WriteString(fmt.Sprintf("%d",m.{{- $objectProperty}}))
                {{- else if eq .Type "int32"}}
                    builder.WriteString(fmt.Sprintf("%d",m.{{- $objectProperty}}))
                {{- else if eq .Type "int64"}}
                    builder.WriteString(fmt.Sprintf("%d",m.{{- $objectProperty}}))
                {{- else}}
                    builder.WriteString(fmt.Sprintf("%v",m.{{- $objectProperty}}))
                {{- end}}
        {{- end}}
            default:
                injector(item)
        }
    }
}
