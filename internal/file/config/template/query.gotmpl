{{- $packageName := toLower .Table.Name }}
package {{$packageName}} 

import (
    "context"
	"fmt"
	"errors"
	"github.com/go-kit/log"
	"github.com/go-kit/log/level"
	sql "github.com/louvri/gosl"
	"github.com/louvri/gob/arr"
	_sql "database/sql"
	base "$PROJECT_PATH/$REPOSITORY_PATH"
    db "$PROJECT_PATH/$MODEL_PATH/{{$packageName}}"
	"github.com/louvri/gosl/transformer"
	"github.com/louvri/gosl/builder"
	"github.com/jmoiron/sqlx"
)

type repository struct {
	logger log.Logger
	stmts map[string]map[string]interface{}
}

func New(logger log.Logger) base.Repository {
	return &repository{
		logger: logger,
		stmts: make(map[string]map[string]interface{}),
	}
}

func (i *repository) Get(ctx context.Context, param builder.QueryParams,trans ...transformer.Transformer) (interface{},error) {
	var response interface{}
	var err error
	if len (trans) > 0 {
		response,err = i.Query(ctx,[]builder.QueryParams{param},trans[0])
	} else {
		response,err = i.Query(ctx,[]builder.QueryParams{param})
	}
	if tmp,ok := response.([]db.Model); ok && len(tmp)>0 {
		return &tmp[0], err
	} else{
		return nil, err
	}
}

func (i *repository) All(ctx context.Context, param builder.QueryParams, trans ...transformer.Transformer) (interface{},error) {
	if len(trans) > 0 {
		return i.Query(ctx,[]builder.QueryParams{param},trans[0])
	}
	return i.Query(ctx,[]builder.QueryParams{param},trans...)
}

func (i *repository) Set(ctx context.Context, model interface{}) (int64,error) {
	return i.Upsert(ctx,model)
}

func (i *repository) Query(ctx context.Context, params []builder.QueryParams, trans ...transformer.Transformer) (interface{},error) {
	read := func (rows *sqlx.Rows, indexedfilter map[string]bool) (*db.Model, error){
		result, err := scan(rows, indexedfilter)
		if err != nil && err != _sql.ErrNoRows {
			return nil, err
		}
		if result != nil {
			var out interface{}
			out = *result
			if len(trans) > 0 {
				if trans[0].Transform != nil {
					out, err = trans[0].Transform(*result)
					if err != nil {
						return nil,err
					}
				}
				if trans[0].Store != nil {
					err = trans[0].Store(out)
					if err != nil {
						return nil,err
					}
				}
			}
		}
		return result, nil
	}
	if len(params) == 0 {
		params = make([]builder.QueryParams,0)
		params = append(params,builder.QueryParams{
			Merge: &builder.Merge{
				Operation: builder.Statement,
			},
		})
	}
	response := make([]db.Model,0)
	if i.stmts["query+0"] != nil || i.stmts["query"] != nil{	
		for idx,param := range params {
			if cfg := i.stmts[fmt.Sprintf("query+%d",idx)]; len(cfg) > 0 {
				stmt,ok := cfg["statement"].(*sqlx.Stmt)
				if !ok {
					return -1, errors.New("prepared statement is not set properly")
				}
				var err error
				var rows *sqlx.Rows 
				normalize(&param)
				if tmp := extract(param); len(tmp) > 0 {
					rows, err = stmt.QueryxContext(ctx, tmp...)
				} else{
					rows, err = stmt.QueryxContext(ctx) 
				}
				if err != nil {
					level.Error(i.logger).Log("{{- $packageName}}:repository:query", err.Error())
					level.Debug(i.logger).Log("{{- $packageName}}:repository:query", cfg["key"])
					return nil, err
				}
				indexedfilter := arr.Index(param.ColumnFilter)
				defer rows.Close()
				for rows.Next(){ 
					result, err := read(rows,indexedfilter)
					if err != nil {
						level.Error(i.logger).Log("{{- $packageName}}:repository:query", err.Error())
						return nil,err
					}
					response = append(response,*result)
				}
				if param.Merge != nil && param.Merge.ShouldContinue != nil && !param.Merge.ShouldContinue(response) {
					break
				}
			} else {
				return nil, errors.New("prepared statement is not set properly")
			}
		}
	} else {
		var err error
		ref := ctx.Value(sql.SQL_KEY)
		if ref == nil {
			err = errors.New("database is not initialized")
			level.Error(i.logger).Log("{{- $packageName}}:repository:query", err.Error())
			return nil,err
		}
		queryable := ref.(*sql.Queryable)
		{{- $primary_key := ""}}
		{{- range .Table.PrimaryKeys }}
			{{- $primary_key = .Name}}
		{{- end}}
		tracks := make([]interface{}, 0)
		key := "{{- $primary_key }}"
		operation := builder.Statement
		shouldMerge := len(params) > 1
		for _, param := range params {
			normalize(&param)
			if param.Merge != nil {
				if param.Merge.Track != "" {
					key = param.Merge.Track
				}
				operation = param.Merge.Operation 
			}
			indexedfilter := arr.Index(param.ColumnFilter)
			q := builder.New()
			q = q.From("{{- $packageName}}")
			q = q.Page(param.Page)
			q = q.Groups(param.Groupby)
			q = q.Size(param.Size)
			q = q.Orders(param.Orderby)
			if param.IsDistinct {
				q = q.Select("DISTINCT " + buildSelection(indexedfilter))
			} else {
				q = q.Select(buildSelection(indexedfilter))
			}
			q = next(q,param,key,tracks)
			q = where(q,param)
			stmt, values := q.Build()
			rows, err := queryable.QueryxContext(ctx, stmt, values...)
			if err != nil && err != _sql.ErrNoRows {
				level.Error(i.logger).Log("{{- $packageName}}:repository:query", err.Error())
				return nil,err
			}
			defer rows.Close()
			for rows.Next() {
				result, err := read(rows,indexedfilter)
				if err != nil {
					level.Error(i.logger).Log("{{- $packageName}}:repository:query", err.Error())
					return nil,err
				} 					
				if shouldMerge && builder.Identifier == operation {
					track := result.Get(key)
					if track != nil {
						tracks  = append(tracks, track)
					}
				}
				response = append(response,*result)
			}
			if shouldMerge {
				if operation == builder.Statement {
					tracks = append(tracks, stmt)
				}
				if param.Merge != nil && param.Merge.ShouldContinue != nil && !param.Merge.ShouldContinue(response) {
					break
				}
			}
		} 
	} 
	return response,nil
}

func (i *repository) PrepareQuery(ctx context.Context, params []builder.QueryParams) error{
	var err error
	ref := ctx.Value(sql.SQL_KEY)
	if ref == nil {
		err = errors.New("database is not initialized")
		level.Error(i.logger).Log("{{- $packageName}}:repository:query", err.Error())
		return err
	}
	queryable := ref.(*sql.Queryable)
	if len(params) > 0 && i.stmts["query+0"] == nil{
		{{- $primary_key := ""}}
		{{- range .Table.PrimaryKeys }}
			{{- $primary_key = .Name}}
		{{- end}}
		tracks := make([]interface{}, 0)
		key := "{{- $primary_key }}"
		operation := builder.Statement
		shouldMerge := len(params) > 1
		for idx, param := range params {
			normalize(&param)
			if param.Merge != nil {
				if param.Merge.Track != "" {
					key = param.Merge.Track
				}
				operation = param.Merge.Operation 
			}
			indexedfilter := arr.Index(param.ColumnFilter)
			q := builder.New()
			q = q.From("{{- $packageName}}")
			q = q.Page(param.Page)
			q = q.Groups(param.Groupby)
			q = q.Size(param.Size)
			q = q.Orders(param.Orderby)
			if param.IsDistinct {
				q = q.Select("DISTINCT " + buildSelection(indexedfilter))
			} else {
				q = q.Select(buildSelection(indexedfilter))
			}
			q = next(q,param,key,tracks)
			q = where(q,param)
			query, _ := q.Build()
			statement, err := queryable.Preparex(query)
			if err != nil {
			   level.Error(i.logger).Log("{{- $packageName}}:repository:prepareQuery", err.Error())
			   return err
			}
			i.stmts[fmt.Sprintf("query+%d",idx)] = map[string]interface{}{
				"statement": statement,
				"key": query,
			}
			if shouldMerge && operation == builder.Statement {
				tracks = append(tracks, query)
			}
		}
	} else if i.stmts["query"] == nil {
		q := builder.New()
		q = q.From("{{- $packageName}}")
		q = q.Select(buildSelection(map[string]bool{}))
		query, _ := q.Build()
		statement, err := queryable.Preparex(query)
		if err != nil {
			level.Error(i.logger).Log("{{- $packageName}}:repository:prepareQuery", err.Error())
			return err
		}
		i.stmts["query"] = map[string]interface{}{
			"statement": statement,
			"key": query,
		}
	}
	return nil
}

func (i *repository) Count(ctx context.Context, params []builder.QueryParams) (total int, err error) {
	if i.stmts["count+0"] != nil || i.stmts["count"] !=nil {
		for idx,param := range params {
			if cfg := i.stmts[fmt.Sprintf("count+%d",idx)]; len(cfg) > 0 {
				stmt,ok := cfg["statement"].(*sqlx.Stmt)
				if !ok {
					return -1, errors.New("prepared statement is not set properly")
				}
				var err error
				var row *sqlx.Row
				normalize(&param)
				if tmp := extract(param); len(tmp) > 0 {
					row = stmt.QueryRowxContext(ctx, tmp...)
				} else {
					row = stmt.QueryRowxContext(ctx)
				}
				if row == nil {
					level.Debug(i.logger).Log("{{- $packageName}}:repository:count", cfg["key"])
					return -1, err
				}
				var count int
				err = row.Scan(&count)
				if err != nil && err != _sql.ErrNoRows {
					return -1, err
				}
				total = total + count
				if param.Merge != nil && param.Merge.ShouldContinue != nil && !param.Merge.ShouldContinue(total) {
					break
				}
			} else {
				return -1, errors.New("prepared statement is not set properly")
			}
		}
	} else {
		ref := ctx.Value(sql.SQL_KEY)
		if ref == nil {
			err = errors.New("database is not initialized")
			level.Error(i.logger).Log("{{- $packageName}}:repository:count", err.Error())
			return -1, err
		}
		queryable := ref.(*sql.Queryable)
		{{- $db_primary_key := ""}}
		{{- range .Table.PrimaryKeys }}
			{{- $db_primary_key = .Name}}
		{{- end}}
		tracks := make([]interface{}, 0)
		key := "{{- $primary_key }}"
		operation := builder.Statement
		shouldMerge := len(params) > 1
		for _, param := range params {
			normalize(&param)
			if param.Merge != nil {
				if param.Merge.Track != "" {
					key = param.Merge.Track
				}
				operation = param.Merge.Operation 
			}
			q := builder.New()
			q = q.From("{{- $packageName}}")
			q = q.Select("COUNT({{- $db_primary_key}}) as total")
			q = next(q,param,key,tracks)
			q = where(q,param)
			stmt, values := q.Build()
			row :=  queryable.DB().QueryRowContext(ctx, stmt, values...)
			var count int
			err = row.Scan(&count)
			if err != nil && err != _sql.ErrNoRows {
				return -1, err
			}
			total = total + count
			if shouldMerge{
				if operation == builder.Statement {
					tracks = append(tracks, stmt)
				}
				if param.Merge != nil && param.Merge.ShouldContinue != nil && !param.Merge.ShouldContinue(count) {
					break
				}
			}
		} 
	}
	return total, nil
}


func (i *repository) PrepareCount(ctx context.Context, params []builder.QueryParams) error{
	var err error
	ref := ctx.Value(sql.SQL_KEY)
	if ref == nil {
		err = errors.New("database is not initialized")
		level.Error(i.logger).Log("{{- $packageName}}:repository:query", err.Error())
		return err
	}
	queryable := ref.(*sql.Queryable)
	if len(params) > 0 && i.stmts["count+0"] == nil{
		{{- $db_primary_key := ""}}
		{{- range .Table.PrimaryKeys }}
			{{- $db_primary_key = .Name}}
		{{- end}}
		tracks := make([]interface{}, 0)
		key := "{{- $primary_key }}"
		operation := builder.Statement
		shouldMerge := len(params) > 1
		for idx, param := range params {
			normalize(&param)
			if param.Merge != nil {
				if param.Merge.Track != "" {
					key = param.Merge.Track
				}
				operation = param.Merge.Operation 
			}
			q := builder.New()
			q = q.From("{{- $packageName}}")
			q = q.Select("COUNT({{- $db_primary_key}}) as total")
			q = where(q,param)
			q = next(q,param,key,tracks)
			query, _ := q.Build()
			statement, err := queryable.Preparex(query)
			if err != nil {
			   level.Error(i.logger).Log("{{- $packageName}}:repository:prepareQuery", err.Error())
			   return err
			}
			i.stmts[fmt.Sprintf("count+%d",idx)] = map[string]interface{}{
				"statement": statement,
				"key": query,
			}
			if shouldMerge && operation == builder.Statement {
				tracks = append(tracks, query)
			}
		}
	} else if i.stmts["count"] == nil{
		q := builder.New()
		q = q.From("{{- $packageName}}")
		q = q.Select("COUNT({{- $db_primary_key}}) as total")
		query, _ := q.Build()
		statement, err := queryable.Preparex(query)
		if err != nil {
			level.Error(i.logger).Log("{{- $packageName}}:repository:prepareQuery", err.Error())
			return err
		}
		i.stmts["count"] = map[string]interface{}{
			"statement": statement,
			"key": query,
		}
	}
	return nil
}

//insert: insert data with default value, use map to include nil value
func (i *repository) Insert(ctx context.Context, model interface{}) (int64,error) {
	var normalizedData map[string]interface{} 
	if tmp,ok := normalize(model).(map[string]interface{}); ok {
		normalizedData = tmp
	} else {
		return 0, errors.New("invalid_object")
	}
	if i.stmts["insert"] != nil {
		if cfg := i.stmts["insert"]; len(cfg) > 0 {
			stmt,ok := cfg["statement"].(*sqlx.Stmt)
			if !ok {
				return -1, errors.New("prepared statement is not set properly")
			}
			tobeInserted := make([]interface{},0)
			for _,data := range normalizedData {
				tobeInserted = append(tobeInserted,data)
			}
			rows, err := stmt.ExecContext(ctx,tobeInserted)
			if err != nil {
				level.Error(i.logger).Log("{{- $packageName}}:repository:insert", err.Error())
				level.Debug(i.logger).Log("{{- $packageName}}:repository:insert",cfg["key"])
				return -1, err
			}
			return rows.LastInsertId()
		} else {
			return -1, errors.New("prepared statement is not set properly")
		}
	} else {
		ref := ctx.Value(sql.SQL_KEY)
		if ref == nil {
			err := errors.New("database is not initialized")
			level.Error(i.logger).Log("{{- $packageName}}:repository:insert", err.Error())
			return -1,err
		}
		queryable := ref.(*sql.Queryable)
		q := builder.New()
		q = q.From("`{{- $packageName}}`")
		q = q.Insert(normalizedData)
		query, values := q.Build()
		rows, err := queryable.ExecContext(ctx, query, values...)
		if err != nil {
			return -1, err
		}
		return rows.LastInsertId()
	}
}

func (i *repository) PrepareInsert(ctx context.Context, model interface{}) error {
	if i.stmts["insert"] == nil {
		ref := ctx.Value(sql.SQL_KEY)
		if ref == nil {
			err := errors.New("database is not initialized")
			level.Error(i.logger).Log("{{- $packageName}}:repository:insert", err.Error())
			return err
		}
		var normalizedData map[string]interface{} 
		if tmp,ok := normalize(model).(map[string]interface{}); ok {
			normalizedData = tmp
		} else {
			return errors.New("invalid_object")
		}
		queryable := ref.(*sql.Queryable)
		q := builder.New()
		q = q.From("`{{- $packageName}}`")
		q = q.Insert(normalizedData)
		query, _ := q.Build()
		statement, err := queryable.Preparex(query)
		if err != nil {
			level.Error(i.logger).Log("{{- $packageName}}:repository:prepareInsert", err.Error())
			return err
		}
		i.stmts["insert"] = map[string]interface{}{
			"statement": statement,
			"key": query,
		}
	}
	return nil
}

//update : update method that ignore any nil or empty value if supplied values is object, use map to include nil value
func (i *repository) Update(ctx context.Context, model interface{}, param builder.QueryParams) error {
	var normalizedData map[string]interface{} 
	if tmp,ok := normalize(model).(map[string]interface{}); ok {
		normalizedData = tmp
	} else {
		return errors.New("invalid_object")
	}
	normalize(&param)
	if i.stmts["update"] != nil {
		if cfg := i.stmts["update"]; len(cfg) > 0{
			stmt,ok := cfg["statement"].(*sqlx.Stmt)
			if !ok {
				return errors.New("prepared statement is not set properly")
			}
			tobeUpdated := make([]interface{},0)
			for _,data := range normalizedData {
				tobeUpdated = append(tobeUpdated,data)
			}
			tobeUpdated = append(tobeUpdated, extract(param)...)
			result, err := stmt.ExecContext(ctx,tobeUpdated...)
			if err != nil {
				level.Error(i.logger).Log("{{- $packageName}}:repository:update", err.Error())
				level.Debug(i.logger).Log("{{- $packageName}}:repository:update", cfg["key"])
				return err
			}
			if rowAffected, err := result.RowsAffected();  rowAffected < 1 {
				return errors.New("no_changes")
			} else if err != nil  {
				return err
			}
			return nil
		} else {
			return errors.New("prepared statement is not set properly")
		}
	} else {
		ref := ctx.Value(sql.SQL_KEY)
		if ref == nil {
			err := errors.New("database is not initialized")
			level.Error(i.logger).Log("{{- $packageName}}:repository:count", err.Error())
			return err
		}
		queryable := ref.(*sql.Queryable)
		q := builder.New()
		q = q.From("`{{- $packageName}}`")
		q = q.Update(normalizedData)
		q = where(q, param)
		query, values := q.Build()
		result, err := queryable.ExecContext(ctx, query, values...)
		if err != nil {
			return err
		}
		if rowAffected, err := result.RowsAffected();  rowAffected < 1 {
			return errors.New("no_changes")
		} else if err != nil  {
			return err
		}
		return nil
	}
}

func (i *repository) PrepareUpdate(ctx context.Context, model interface{}, param builder.QueryParams) error {
	if i.stmts["update"] == nil {
		ref := ctx.Value(sql.SQL_KEY)
		if ref == nil {
			err := errors.New("database is not initialized")
			level.Error(i.logger).Log("{{- $packageName}}:repository:prepareUpdate", err.Error())
			return err
		}
		var normalizedData map[string]interface{} 
		if tmp,ok := normalize(model).(map[string]interface{}); ok {
			normalizedData = tmp
		} else {
			return errors.New("invalid_object")
		}
		queryable := ref.(*sql.Queryable)
		normalize(&param)
		q := builder.New()
		q = q.From("`{{- $packageName}}`")
		q = q.Update(normalizedData)
		q = where(q, param)
		query, _ := q.Build()
		statement, err := queryable.Preparex(query)
		if err != nil {
			level.Error(i.logger).Log("{{- $packageName}}:repository:prepareUpdate", err.Error())
			return err
		}
		i.stmts["update"] = map[string]interface{}{
			"statement": statement,
			"key": query,
		}
	}
	return nil
}

//upsert : update or insert method that ignore any nil or empty value, use map to include nil value
func (i *repository) Upsert(ctx context.Context, model interface{}) (int64,error) {
	var normalizedData map[string]interface{} 
	if tmp,ok := normalize(model).(map[string]interface{}); ok {
		normalizedData = tmp
	} else {
		return 0, errors.New("invalid_object")
	}
	if len(normalizedData) == 0 {
		return 0, errors.New("invalid_object")
	}
	if i.stmts["upsert"] != nil {
		if cfg := i.stmts["upsert"]; len(cfg) > 0 {
			stmt,ok := cfg["statement"].(*sqlx.Stmt)
			if !ok {
				return -1, errors.New("prepared statement is not set properly")
			}
			tobeUpserted := make([]interface{},0)
			for _,data := range normalizedData {
				   tobeUpserted = append(tobeUpserted,data)
			}
			rows, err := stmt.ExecContext(ctx,tobeUpserted)
			if err != nil {
				level.Error(i.logger).Log("{{- $packageName}}:repository:upsert", err.Error())
				level.Debug(i.logger).Log("{{- $packageName}}:repository:upsert", cfg["key"])
				return -1, err
			}
			return rows.LastInsertId()
		} else {
			return -1, errors.New("prepared statement is not set properly")
		}
	} else {
		ref := ctx.Value(sql.SQL_KEY)
		if ref == nil {
			err := errors.New("database is not initialized")
			level.Error(i.logger).Log("{{- $packageName}}:repository:count", err.Error())
			return -1,err
		}
		queryable := ref.(*sql.Queryable)
		q := builder.New()
		q = q.From("`{{- $packageName}}`")
		q = q.Upsert(normalizedData)
		query, values := q.Build()
		rows, err := queryable.ExecContext(ctx, query, values...)
		if err != nil {
			return -1, err
		}
		if rowAffected, err := rows.RowsAffected();  rowAffected < 1 {
			return -1,errors.New("no_changes")
		} else if err != nil  {
			return -1,err
		}
		return rows.LastInsertId()
	}
}

func (i *repository) PrepareUpsert(ctx context.Context, model interface{}) error {
	if i.stmts["upsert"] == nil {
		ref := ctx.Value(sql.SQL_KEY)
		if ref == nil {
			err := errors.New("database is not initialized")
			level.Error(i.logger).Log("{{- $packageName}}:repository:count", err.Error())
			return err
		}
		var normalizedData map[string]interface{} 
		if tmp,ok := normalize(model).(map[string]interface{}); ok {
			normalizedData = tmp
		} else {
			return errors.New("invalid_object")
		}
		queryable := ref.(*sql.Queryable)
		q := builder.New()
		q = q.From("`{{- $packageName}}`")
		q = q.Upsert(normalizedData)
		query, _ := q.Build()
		stmt, err := queryable.Preparex(query)
		if err != nil {
			return err
		}
		i.stmts["upsert"] = map[string]interface{}{
			"statement": stmt, 
			"key": query,
		}
	}
	return nil
}

//delete : delete method
func (i *repository) Delete(ctx context.Context, param builder.QueryParams) error {
	if i.stmts["delete"] != nil {
		if cfg := i.stmts["delete"]; len(cfg) > 0{
			stmt,ok := cfg["statement"].(*sqlx.Stmt)
			if !ok {
				return errors.New("prepared statement is not set properly")
			}
			_, err := stmt.ExecContext(ctx, extract(param)...)
			return err
		} else {
			return errors.New("prepared statement is not set properly")
		}
	} else {
		ref := ctx.Value(sql.SQL_KEY)
		if ref == nil {
			err := errors.New("database is not initialized")
			level.Error(i.logger).Log("{{- $packageName}}:repository:delete", err.Error())
			return err
		}
		queryable := ref.(*sql.Queryable)
		normalize(&param)
		q := builder.New()
		q = q.Delete()
		q = q.From("`{{- $packageName}}`")
		q = where(q, param)
		query, values := q.Build()
		if query == "" {
			return errors.New("Delete operation requires condition")
		}
		_, err := queryable.ExecContext(ctx, query, values...)
		if err != nil {
			level.Error(i.logger).Log("{{- $packageName}}:repository:delete", err.Error())
		}
		return err
	}
}

func (i *repository) PrepareDelete(ctx context.Context, param builder.QueryParams) error {
	if i.stmts["delete"] == nil {
		ref := ctx.Value(sql.SQL_KEY)
		if ref == nil {
			err := errors.New("database is not initialized")
			level.Error(i.logger).Log("{{- $packageName}}:repository:count", err.Error())
			return err
		}
		queryable := ref.(*sql.Queryable)
		normalize(&param)
		q := builder.New()
		q = q.From("`{{- $packageName}}`")
		q = q.Delete()
		q = where(q, param)
		query, _ := q.Build()
		stmt,err := queryable.Preparex(query)
		if err != nil {
			return err
		}
		i.stmts["delete"] = map[string]interface{}{
			"statement": stmt,
			"key": query,
		}
	}
	return nil
}
