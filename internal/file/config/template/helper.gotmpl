{{- $packageName := toLower .Table.Name }}
package {{$packageName}} 

import (
   "fmt"
   "sort"
   "strings"
   _sql "database/sql"
   "github.com/jmoiron/sqlx"
   "errors"
	"time"
    "github.com/louvri/gosl/builder"
	db "$PROJECT_PATH/$MODEL_PATH/{{$packageName}}"
)

func buildSelection(indexFilter map[string]bool) string {
	var builder strings.Builder
	isFilterEmpty := len(indexFilter) == 0
    {{- $first := "true" }}
    {{- range .Table.Columns }}
            if isFilterEmpty || indexFilter["`{{- .Name}}`"] {
                if builder.Len() > 0 {
                    builder.WriteString(",")
                }
                {{if or (eq .Type "float32") (eq .Type "float64") }}
                    builder.WriteString("COALESCE(")
                    builder.WriteString("`{{- .Name}}`")
                    builder.WriteString(",")
                    builder.WriteString("0.0") // float empty
                    builder.WriteString(") AS ")
                    builder.WriteString("`{{- .Name}}`")
                 {{else if or ( or (eq .Type "int") (eq .Type "int32") ) (eq .Type "int64") }}
                    builder.WriteString("COALESCE(")
                    builder.WriteString("`{{- .Name}}`")
                    builder.WriteString(",")
                    builder.WriteString("0") // int empty
                    builder.WriteString(") AS ")
                    builder.WriteString("`{{- .Name}}`")
                {{else if eq .Type "bool"}}
                    builder.WriteString("COALESCE(")
                    builder.WriteString("`{{- .Name}}`")
                    builder.WriteString(",")
                    builder.WriteString("false") // bool empty
                    builder.WriteString(") AS ")
                    builder.WriteString("`{{- .Name}}`")
                {{else}}
                    builder.WriteString("COALESCE(")
                    builder.WriteString("`{{- .Name}}`")
                    builder.WriteString(",")
                    builder.WriteString("''") // string empty
                    builder.WriteString(") AS ")
                    builder.WriteString("`{{- .Name}}`")
                 {{end}}  
            }
            {{- $first = "false"}}
    {{- end}}
	return builder.String()
}

func list(param builder.QueryParams) []string {
    //build statement priorities
    duplicate := make(map[string]bool)
    var priorities []string
    if len(param.Priority) == 0 {
       priorities = make([]string,0)
    } else {
       priorities = param.Priority
    }
    if len(priorities) == 0 {
        {{- range .Table.PrimaryKeys }}    
            if !duplicate["{{.Name}}"] {
                priorities = append (priorities, "{{.Name}}")
                duplicate["{{.Name}}"] = true
            }
        {{- end }}    
        {{- range .Table.Indexes}}
            {{- range .Columns}}
                {{- $indexName := .Name}}
                {{- $exists := false }}
                {{- range .Table.PrimaryKeys }}
                    {{- $primaryName := .Name}}   
                    {{- if eq $primaryName $indexName }}
                        {{- $exists = true }}
                    {{- end }}
                {{- end}}
                {{- if eq $exists false }}
                    if !duplicate["{{$indexName}}"] {
                        priorities = append (priorities, "{{$indexName}}")
                        duplicate["{{$indexName}}"] = true
                    }
                {{- end }}
            {{- end }}
        {{- end }}
    }
    
    keys := make([]string,0)
    extractKeys := func(key string){
        if !duplicate[key] {
            keys = append(keys,key)
            duplicate[key] = true
        }
    }
    
    //index statements
    for key := range param.BetweenTime { extractKeys(key) }
    for key := range param.In { extractKeys(key) }
    for key := range param.Notin { extractKeys(key) }
    if obj,ok := param.Object.(map[string]interface{}); ok {
        for key := range obj { extractKeys(key) }
    }
    for _,condition := range param.Conditions { extractKeys(condition.Key) }
   
    //sort statements before returning it to the caller
    sort.Strings(keys)
    priorities = append(priorities,keys...)
   
    return priorities
}


func where(statement builder.Builder, param builder.QueryParams) builder.Builder {
    indexes := make(map[string][]map[string]interface{})
	register := func(op, key string, value interface{}) {
		if indexes[key] == nil {
			indexes[key] = make([]map[string]interface{}, 0)
		}
		indexes[key] = append(indexes[key], map[string]interface{}{
			op: value,
		})
	}
    //index
    for key, value := range param.BetweenTime { register("betweenTime",key,value) }
    for key, value := range param.In { register("in",key,value) }
    for key, value := range param.Notin { register("notIn",key,value) }
    if obj,ok := param.Object.(map[string]interface{}); ok {
        for key, value := range obj { register("object",key,value) }
    }
    for _,condition := range param.Conditions { register("custom",condition.Key,condition) }
    
    //building the actual statement from parameters that is sorted beforehand
    for _,key := range list(param) {
       for _, actions := range indexes[key] {
			for action, value := range actions {
				switch action {
				case "betweenTime":
					{
						if converted, ok := value.([]time.Time); ok {
							if len(converted) == 2 {
								_, nWhere, _ := statement.Status()
								if nWhere > 0 {
									statement = statement.And()
								}
								statement = statement.BetweenTime(key, converted[0], converted[1])
							}
						}
					}
				case "in":
					{
						if value != nil {
							_, nWhere, _ := statement.Status()
							if nWhere > 0 {
								statement = statement.And()
							}
							statement = statement.In(map[string]interface{}{
								key: value,
							})
						}
					}
				case "notIn":
					{
						if value != nil {
							_, nWhere, _ := statement.Status()
							if nWhere > 0 {
								statement = statement.And()
							}
							statement = statement.Not(builder.New().In(map[string]interface{}{
								key: value,
							}))
						}
					}
				case "object":
					{
						if value != nil {
							_, nWhere, _ := statement.Status()
							if nWhere > 0 {
								statement = statement.And()
							}
							var str strings.Builder
							str.WriteString(key)
							str.WriteString(" = ?")
							statement = statement.Statement(str.String(), []interface{}{value})
						}
					}
				case "custom":
					{
						cond := value.(builder.Condition)
						if cond.Key != "" && cond.Value != nil {
							_, nWhere, _ := statement.Status()
							if nWhere > 0 {
								statement = statement.And()
							}
							statement = statement.Compare([]builder.Condition{cond})
						}
					}
				}

			}

		}
    }
    return statement
}
func next(statement builder.Builder,param builder.QueryParams,key string, tracks []interface{}) builder.Builder{
    if len(tracks) > 0 {
        if param.Next != nil {
            _, nWhere, _ := statement.Status()
            if nWhere > 0 {
                statement = statement.And()
            }
            if param.Next.Direction == "desc" {
                statement = statement.Compare([]builder.Condition{
                    {
                        Key:      param.Next.Column,
                        Operator: "<",
                        Value:    param.Next.Value,
                    },
                })
            } else {
                statement = statement.Compare([]builder.Condition{
                    {
                        Key:      param.Next.Column,
                        Operator: ">",
                        Value:    param.Next.Value,
                    },
                })
            }
        } 
        if param.Merge != nil {
            switch param.Merge.Operation {
                case builder.Identifier:
                    {
                        in := make(map[string]interface{})
                        in[key] = tracks
                        if _, w, _ := statement.Status(); w > 0 {
                            statement = statement.And()
                        }
                        statement = statement.Not(builder.New().In(in))
                    }
                case builder.Statement:
                    {
                        for i, item := range tracks {
                            //id not in (statement)
                            if _, w, _ := statement.Status(); w > 0 {
                                statement = statement.And()
                            }
                            if inner, ok := item.(builder.Builder); ok {
                                inner.Reset("select")
                                inner.Select(key)
                                inner.Reset("from")
                                inner.From("area", fmt.Sprintf("%c", 'a'+i))
                                statement = statement.Not(builder.New().
                                    Exists(
                                        inner,
                                        builder.Condition{
                                            Key: fmt.Sprintf("%s.%s",
                                                inner.Alias("area"),
                                                key,
                                            ),
                                            Operator: "=",
                                            Value: fmt.Sprintf("%s.%s",
                                                inner.Alias("area"),
                                                key,
                                            ),
                                        },
                                    ),
                                )
                            }
                        }
                    }
            }

        }
        
    }
    return statement
}

func extract(param builder.QueryParams) []interface{}{
    out := make([]interface{},0)
	indexes := make(map[string][]map[string]interface{})
	register := func(op, key string, value interface{}) {
		if indexes[key] == nil {
			indexes[key] = make([]map[string]interface{}, 0)
		}
		indexes[key] = append(indexes[key], map[string]interface{}{
			op: value,
		})
	}
    //index
    for key, value := range param.BetweenTime { register("betweenTime",key,value) }
    for key, value := range param.In { register("in",key,value) }
    for key, value := range param.Notin { register("notIn",key,value) }
    if obj,ok := param.Object.(map[string]interface{}); ok {
        for key, value := range obj { register("object",key,value) }
    }
    for _,condition := range param.Conditions { register("custom",condition.Key,condition) }
    
    for _,key := range list(param) {
       for _, actions := range indexes[key] {
			for action, value := range actions {
				switch action {
				case "betweenTime":
					{
						if tmp, ok := value.([]time.Time); ok {
							if len(tmp) == 2 {
                                for _,converted := range tmp {
                                    out = append(out, converted)
                                }
							}
						}
					}
				case "in":
					{
						if value != nil {
                            if tmp, ok := value.([]string); ok {
                                for _,converted := range tmp {
                                    out = append(out, converted)
                                }
                            }
						}
					}
				case "notIn":
					{
						if value != nil {
							if tmp, ok := value.([]string); ok {
                                for _,converted := range tmp {
                                    out = append(out, converted)
                                }
                            }
						}
					}
				case "object":
					{
						if value != nil {
                            out = append(out, value)
						}
					}
				case "custom":
					{
						cond := value.(builder.Condition)
						if cond.Key != "" && cond.Value != nil {
                            out = append(out, cond.Value)
						}
					}
				}

			}

		}
    }
    return out
}

func normalize(data interface{}) interface{} {
    if param,ok := data.(*builder.QueryParams); ok {
        param.In = builder.ResolveColumnNameMap(param.In)
        param.Notin = builder.ResolveColumnNameMap(param.Notin)
        param.BetweenTime = builder.ResolveColumnNameMapInTime(param.BetweenTime)
        param.ColumnFilter = builder.ResolveColumnNameCollections(param.ColumnFilter)
        param.Groupby = builder.ResolveColumnNameCollections(param.Groupby)
        if param.Merge != nil {
            if !strings.Contains(param.Merge.Track,"`") {
                param.Merge.Track = strings.ReplaceAll(builder.ResolveColumnName(param.Merge.Track),"`","")
            }
        }
        conditions := make([]builder.Condition, 0)
        for _, item := range param.Conditions {
            if !strings.Contains(item.Key,"`") && !strings.Contains(item.Key, "'$.") {
                item.Key = builder.ResolveColumnName(item.Key)
            }
            conditions = append(conditions, item)
        }
        param.Conditions = conditions
        orderby := make([]builder.OrderBy,0)
        for _,item := range param.Orderby {
            if !strings.Contains(item.Column,"`") && !strings.Contains(item.Column, "'$.") {
                item.Column = builder.ResolveColumnName(item.Column)
            }
            if db.TypeFor(item.Column) == "string" && len(item.Fields) > 0 {
            reformat := make([]string,0)
            for _,val := range item.Fields {
                    reformat = append(reformat,fmt.Sprintf(`'%s'`,val))
            }
            item.Fields = reformat
            }
            orderby = append(orderby,item)
        }
        param.Orderby = orderby
        if param.Next != nil {
            if !strings.Contains(param.Next.Column,"`") {
                param.Next.Column = builder.ResolveColumnName(param.Next.Column)
            }
        }
        if obj,ok := param.Object.(db.Model); ok {
            datamap := make(map[string]interface{})
            for key, value := range obj.ToMap(nil) { datamap[builder.ResolveColumnName(key)] = value }
            param.Object = datamap
        } else if obj,ok := param.Object.(map[string]interface{}); ok {
            datamap := make(map[string]interface{})
            for key, value := range obj { 
                if strings.Contains(key,"`") {
                    datamap[key] = value 
                } else {
                    datamap[builder.ResolveColumnName(key)] = value 
                }
            }
            param.Object = datamap
        }
        return param
    } else if param, ok := data.(map[string]interface{}); ok {
        datamap := make(map[string]interface{})
        for key, value := range param { 
            if strings.Contains(key,"`") {
                datamap[key] = value 
            } else {
                datamap[builder.ResolveColumnName(key)] = value 
            }
        }
        return datamap
    } else if param, ok := data.(db.Model); ok {
        datamap := make(map[string]interface{})
        for key, value := range param.ToMap(nil) { datamap[builder.ResolveColumnName(key)] = value }
        return datamap
    }
    return nil
}

func scan(rows interface{}, filter map[string]bool) (*db.Model, error) {
    var err error
    var result db.Model
    var _row *sqlx.Row
    var _rows *sqlx.Rows
    var ok bool
    _row, ok = rows.(*sqlx.Row)
    if !ok {
        _rows, ok = rows.(*sqlx.Rows)
        if !ok {
            return nil,errors.New("wrong type of sql.row")
        }
    }
    tobeScanned := make([]interface{}, 0)
    isFilterEmpty := len(filter) == 0
    {{- range .Table.Columns }}
            {{- $objectProperty := ""}}
            {{- $tokens := split .Name "_"}}
            {{- range $index , $element := $tokens}}
                {{- $objectProperty = (print $objectProperty (title $element))}}
            {{- end}}
            if isFilterEmpty || filter["`{{.Name}}`"] {
                tobeScanned = append(tobeScanned, &result.{{$objectProperty}})
            }
    {{- end}}
    if _rows != nil {
        err = _rows.Scan(tobeScanned...)
    } else if _row != nil {
        err = _row.Scan(tobeScanned...)
    }
    if err != nil && err != _sql.ErrNoRows {
        return nil,err
    } else if err != nil && err == _sql.ErrNoRows {
        return nil,nil
    }
    return &result,nil
}
